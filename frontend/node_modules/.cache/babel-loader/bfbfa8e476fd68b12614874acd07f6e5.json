{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mihai\\\\Desktop\\\\Projects\\\\atomic-clock\\\\frontend\\\\src\\\\components\\\\cube.tsx\";\nimport * as React from \"react\";\nimport * as THREE from \"three\";\nimport axios from \"axios\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\nimport \"../css/cube.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Cube extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.canvasRef = /*#__PURE__*/React.createRef();\n  }\n\n  // async get3DObjects() {\n  //   const { data } = await axios.get(\n  //     \"https://atomic-clock-prod.herokuapp.com/3D/objects/\"\n  //   );\n  //   return data;\n  // }\n  async getResourcePath(name) {\n    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"files\";\n    const endpoint = \"https://atomic-clock-prod.herokuapp.com/3D/\";\n    const {\n      data\n    } = await axios.get(endpoint + type + \"/\" + name + \"/\");\n    return data.filePath;\n  }\n\n  async loadObject(scene) {\n    //Load object from backend\n    console.log(\"start loading\");\n    const gltfLoader = new GLTFLoader();\n    const url = await this.getResourcePath(\"CityResource\");\n    gltfLoader.load(url, gltf => {\n      const root = gltf.scene;\n      scene.add(root);\n    });\n    console.log(\"finishing..\");\n  }\n\n  componentDidMount() {\n    //Get the canvas\n    const canvas = this.canvasRef.current === null ? undefined : this.canvasRef.current; //Create the renderer\n\n    const renderer = new THREE.WebGLRenderer({\n      canvas\n    });\n    renderer.setSize(1000, 500);\n    renderer.setClearColor(\"black\", 0); //Set the camera props and create camera\n\n    const fov = 75;\n    const aspect = 2;\n    const near = 0.1;\n    const far = 5;\n    const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    camera.position.z = 2; //Create scene\n\n    const scene = new THREE.Scene(); //Set the default geometry for the cube and create its geometry\n\n    const boxWidth = 1;\n    const boxHeight = 1;\n    const boxDepth = 1;\n    const geometry = new THREE.BoxGeometry(boxWidth, boxHeight, boxDepth); //Create a basic material for the cube and set the initial color\n\n    const material = new THREE.MeshPhongMaterial({\n      color: 0x44aa88\n    }); //Create the cube\n    // const cube = new THREE.Mesh(geometry, material);\n    //Create the light\n\n    const color = 0xffffff;\n    const intensity = 1;\n    const light = new THREE.DirectionalLight(color, intensity);\n    light.position.set(-1, 2, 4);\n    scene.add(light); //Add the cube to the scene. Then render the scene\n    // scene.add(cube);\n\n    renderer.render(scene, camera); //loadObject\n\n    this.loadObject(scene); //GoOn\n\n    function resizeRendererToDisplaySize(renderer) {\n      const canvas = renderer.domElement;\n      const pixelRatio = window.devicePixelRatio;\n      const width = canvas.clientWidth * pixelRatio | 0;\n      const height = canvas.clientHeight * pixelRatio | 0;\n      const needResize = canvas.width !== width || canvas.height !== height;\n\n      if (needResize) {\n        renderer.setSize(width, height, false);\n      }\n\n      return needResize;\n    } //Animate the cube\n\n\n    function render(time) {\n      time *= 0.001; // convert time to seconds\n\n      if (resizeRendererToDisplaySize(renderer)) {\n        const canvas = renderer.domElement;\n        camera.aspect = canvas.clientWidth / canvas.clientHeight;\n        camera.updateProjectionMatrix();\n      } // cube.rotation.x = time;\n      // cube.rotation.y = time;\n\n\n      renderer.render(scene, camera);\n      requestAnimationFrame(render);\n    }\n\n    requestAnimationFrame(render);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvasContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: this.canvasRef,\n        id: \"c\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Cube;","map":{"version":3,"names":["React","THREE","axios","GLTFLoader","Cube","Component","canvasRef","createRef","getResourcePath","name","type","endpoint","data","get","filePath","loadObject","scene","console","log","gltfLoader","url","load","gltf","root","add","componentDidMount","canvas","current","undefined","renderer","WebGLRenderer","setSize","setClearColor","fov","aspect","near","far","camera","PerspectiveCamera","position","z","Scene","boxWidth","boxHeight","boxDepth","geometry","BoxGeometry","material","MeshPhongMaterial","color","intensity","light","DirectionalLight","set","render","resizeRendererToDisplaySize","domElement","pixelRatio","window","devicePixelRatio","width","clientWidth","height","clientHeight","needResize","time","updateProjectionMatrix","requestAnimationFrame"],"sources":["C:/Users/Mihai/Desktop/Projects/atomic-clock/frontend/src/components/cube.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport { Component } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport axios from \"axios\";\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\r\nimport \"../css/cube.css\";\r\n\r\ninterface CubeProps {}\r\n\r\ninterface CubeState {}\r\n\r\nclass Cube extends React.Component<CubeProps, CubeState> {\r\n  canvasRef = React.createRef<HTMLCanvasElement>();\r\n\r\n  // async get3DObjects() {\r\n  //   const { data } = await axios.get(\r\n  //     \"https://atomic-clock-prod.herokuapp.com/3D/objects/\"\r\n  //   );\r\n  //   return data;\r\n  // }\r\n\r\n  async getResourcePath(name: string, type: string = \"files\"): Promise<string> {\r\n    const endpoint = \"https://atomic-clock-prod.herokuapp.com/3D/\";\r\n    const { data } = await axios.get(endpoint + type + \"/\" + name + \"/\");\r\n    return data.filePath;\r\n  }\r\n\r\n  async loadObject(scene: any) {\r\n    //Load object from backend\r\n    console.log(\"start loading\");\r\n    const gltfLoader = new GLTFLoader();\r\n    const url = await this.getResourcePath(\"CityResource\");\r\n    gltfLoader.load(url, (gltf) => {\r\n      const root = gltf.scene;\r\n      scene.add(root);\r\n    });\r\n    console.log(\"finishing..\");\r\n  }\r\n\r\n  componentDidMount() {\r\n    //Get the canvas\r\n    const canvas =\r\n      this.canvasRef.current === null ? undefined : this.canvasRef.current;\r\n\r\n    //Create the renderer\r\n    const renderer = new THREE.WebGLRenderer({ canvas });\r\n    renderer.setSize(1000, 500);\r\n    renderer.setClearColor(\"black\", 0);\r\n\r\n    //Set the camera props and create camera\r\n    const fov = 75;\r\n    const aspect = 2;\r\n    const near = 0.1;\r\n    const far = 5;\r\n    const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\r\n    camera.position.z = 2;\r\n\r\n    //Create scene\r\n    const scene = new THREE.Scene();\r\n\r\n    //Set the default geometry for the cube and create its geometry\r\n    const boxWidth = 1;\r\n    const boxHeight = 1;\r\n    const boxDepth = 1;\r\n    const geometry = new THREE.BoxGeometry(boxWidth, boxHeight, boxDepth);\r\n\r\n    //Create a basic material for the cube and set the initial color\r\n    const material = new THREE.MeshPhongMaterial({ color: 0x44aa88 });\r\n\r\n    //Create the cube\r\n    // const cube = new THREE.Mesh(geometry, material);\r\n\r\n    //Create the light\r\n    const color = 0xffffff;\r\n    const intensity = 1;\r\n    const light = new THREE.DirectionalLight(color, intensity);\r\n    light.position.set(-1, 2, 4);\r\n    scene.add(light);\r\n\r\n    //Add the cube to the scene. Then render the scene\r\n    // scene.add(cube);\r\n    renderer.render(scene, camera);\r\n\r\n    //loadObject\r\n    this.loadObject(scene);\r\n\r\n    //GoOn\r\n    function resizeRendererToDisplaySize(renderer: any) {\r\n      const canvas = renderer.domElement;\r\n      const pixelRatio = window.devicePixelRatio;\r\n      const width = (canvas.clientWidth * pixelRatio) | 0;\r\n      const height = (canvas.clientHeight * pixelRatio) | 0;\r\n      const needResize = canvas.width !== width || canvas.height !== height;\r\n      if (needResize) {\r\n        renderer.setSize(width, height, false);\r\n      }\r\n      return needResize;\r\n    }\r\n\r\n    //Animate the cube\r\n    function render(time: number) {\r\n      time *= 0.001; // convert time to seconds\r\n\r\n      if (resizeRendererToDisplaySize(renderer)) {\r\n        const canvas = renderer.domElement;\r\n        camera.aspect = canvas.clientWidth / canvas.clientHeight;\r\n        camera.updateProjectionMatrix();\r\n      }\r\n\r\n      // cube.rotation.x = time;\r\n      // cube.rotation.y = time;\r\n\r\n      renderer.render(scene, camera);\r\n\r\n      requestAnimationFrame(render);\r\n    }\r\n    requestAnimationFrame(render);\r\n  }\r\n\r\n  render(): React.ReactNode {\r\n    return (\r\n      <div className=\"canvasContainer\">\r\n        <canvas ref={this.canvasRef} id=\"c\"></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cube;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}